"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConfigFile = getConfigFile;
exports.isUmiProject = isUmiProject;
exports.isUsingBigfish = isUsingBigfish;
exports.isUsingUmi = isUsingUmi;
exports.isDepLost = isDepLost;
exports.isPluginLost = isPluginLost;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _fs() {
  const data = require("fs");

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const configFiles = ['.umirc.js', '.umirc.ts', 'config/config.js', 'config/config.ts'];

function getConfigFile(targetDir) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = configFiles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      const f = _step.value;
      const af = (0, _path().join)(targetDir, f);

      if ((0, _fs().existsSync)(af)) {
        return af;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

function isUmiProject(targetDir) {
  const configFile = getConfigFile(targetDir);
  if (configFile) return true;

  function existFile(f) {
    return (0, _fs().existsSync)((0, _path().join)(targetDir, f));
  }

  if (existFile('src') || existFile('pages') || existFile('page')) {
    return true;
  }
}

function isUsingBigfish(targetDir) {
  const pkgPath = (0, _path().join)(targetDir, 'package.json');
  if (!(0, _fs().existsSync)(pkgPath)) return false;
  const pkgStr = (0, _fs().readFileSync)(pkgPath, 'utf-8');
  return pkgStr.includes('"@alipay/bigfish"');
}

function isUsingUmi(targetDir) {
  const pkgPath = (0, _path().join)(targetDir, 'package.json');
  if (!(0, _fs().existsSync)(pkgPath)) return false;
  const pkgStr = (0, _fs().readFileSync)(pkgPath, 'utf-8');
  return pkgStr.includes('"umi"') && !isUsingBigfish(targetDir);
}

function isDepLost(e) {
  const m = e.message.match(/Cannot find module '(.+)'/);
  return m && !m[1].startsWith('.');
}

function isPluginLost(e) {
  return e.message.match(/Plugin .+? can't be resolved/);
}