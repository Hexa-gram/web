"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _traverse() {
  const data = _interopRequireDefault(require("@babel/traverse"));

  _traverse = function _traverse() {
    return data;
  };

  return data;
}

function _generator() {
  const data = _interopRequireDefault(require("@babel/generator"));

  _generator = function _generator() {
    return data;
  };

  return data;
}

function t() {
  const data = _interopRequireWildcard(require("@babel/types"));

  t = function t() {
    return data;
  };

  return data;
}

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function _assert() {
    return data;
  };

  return data;
}

function _prettier() {
  const data = _interopRequireDefault(require("prettier"));

  _prettier = function _prettier() {
    return data;
  };

  return data;
}

function _lodash() {
  const data = require("lodash");

  _lodash = function _lodash() {
    return data;
  };

  return data;
}

function _uppercamelcase() {
  const data = _interopRequireDefault(require("uppercamelcase"));

  _uppercamelcase = function _uppercamelcase() {
    return data;
  };

  return data;
}

var _util = require("../util");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = (content, opts) => {
  const relativePath = opts.relativePath,
        identifier = opts.identifier,
        _opts$index = opts.index,
        index = _opts$index === void 0 ? 0 : _opts$index,
        latest = opts.latest;

  function addImport(node, id) {
    const body = node.body;
    const lastImportSit = (0, _lodash().findLastIndex)(body, item => t().isImportDeclaration(item));
    const newImport = t().importDeclaration([t().importDefaultSpecifier(t().identifier(id))], t().stringLiteral(relativePath));
    body.splice(lastImportSit + 1, 0, newImport);
  }

  function addBlockToJSX({
    node,
    replace,
    id
  }) {
    (0, _assert().default)((0, _util.isJSXElement)(node), 'add block to jsx failed, not valid jsx element');
    const newNode = t().jsxElement(t().jsxOpeningElement(t().jsxIdentifier(id), [], true), null, [], true);

    if ((0, _util.haveChildren)(node)) {
      if (latest) {
        node.children.push(newNode);
      } else {
        const insertIndex = (0, _util.findIndex)(node.children, index, _util.isJSXElement);
        node.children.splice(insertIndex, 0, newNode);
      }
    } else {
      replace(t().jsxFragment(t().jsxOpeningFragment(), t().jsxClosingFragment(), index === 0 ? [newNode, node] : [node, newNode]));
    }
  }

  const ast = (0, _util.parseContent)(content);
  (0, _traverse().default)(ast, {
    Program(path) {
      const node = path.node;
      let d = (0, _util.findExportDefaultDeclaration)(node); // support hoc

      while (t().isCallExpression(d)) {
        // eslint-disable-next-line
        d = d.arguments[0];
      }

      d = (0, _util.getIdentifierDeclaration)(d, path); // Support hoc again

      while (t().isCallExpression(d)) {
        // eslint-disable-next-line
        d = d.arguments[0];
      }

      const ret = (0, _util.getReturnNode)(d, path);
      (0, _assert().default)(ret, 'Can not find return node');
      const id = (0, _uppercamelcase().default)(identifier); // TODO: check id exists
      // Add imports

      addImport(node, id); // Add xxxx

      addBlockToJSX(_objectSpread({}, ret, {
        id
      }));
    }

  });
  const newCode = (0, _generator().default)(ast, {}).code;
  return _prettier().default.format(newCode, {
    singleQuote: true,
    trailingComma: 'es5',
    printWidth: 100,
    parser: 'typescript'
  });
};

exports.default = _default;