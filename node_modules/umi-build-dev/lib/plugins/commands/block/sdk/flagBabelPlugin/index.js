"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function _assert() {
    return data;
  };

  return data;
}

function _umiUtils() {
  const data = require("umi-utils");

  _umiUtils = function _umiUtils() {
    return data;
  };

  return data;
}

function t() {
  const data = _interopRequireWildcard(require("@babel/types"));

  t = function t() {
    return data;
  };

  return data;
}

var _util = require("../util");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = () => {
  function buildGUmiUIFlag({
    index,
    filename,
    jsx
  }) {
    if (jsx) {
      return t().jsxElement(t().jsxOpeningElement(t().jsxIdentifier('GUmiUIFlag'), [t().jsxAttribute(t().jsxIdentifier('filename'), t().stringLiteral(`${filename}`)), t().jsxAttribute(t().jsxIdentifier('index'), t().stringLiteral(`${index}`))]), t().jsxClosingElement(t().jsxIdentifier('GUmiUIFlag')), [], false);
    }

    return t().callExpression(t().memberExpression(t().identifier('React'), t().identifier('createElement')), [t().identifier('GUmiUIFlag'), t().objectExpression([t().objectProperty(t().identifier('filename'), t().stringLiteral(`${filename}`)), t().objectProperty(t().identifier('index'), t().stringLiteral(`${index}`))])]);
  }

  function addFlagToIndex(nodes, i, {
    index,
    filename,
    jsx
  }) {
    nodes.splice(i, 0, buildGUmiUIFlag({
      index,
      filename,
      jsx
    }));
  }

  function addUmiUIFlag(node, {
    filename,
    replace
  }) {
    if ((0, _util.isJSXElement)(node)) {
      if ((0, _util.haveChildren)(node)) {
        if (t().isJSXElement(node) || t().isJSXFragment(node)) {
          let index = node.children.filter(n => (0, _util.isJSXElement)(n)).length;
          let i = node.children.length - 1;

          while (i >= 0) {
            const child = node.children[i];

            if ((0, _util.isJSXElement)(child) || i === 0) {
              addFlagToIndex(node.children, i === 0 ? i : i + 1, {
                index,
                filename,
                jsx: true
              });
              index -= 1;
            }

            i -= 1;
          }
        } else {
          const args = node.arguments;
          let index = args.filter(n => (0, _util.isReactCreateElement)(n)).length;
          let i = args.length - 1;

          while (i >= 1) {
            const arg = args[i];

            if ((0, _util.isReactCreateElement)(arg) || i === 1) {
              addFlagToIndex(args, i + 1, {
                index,
                filename,
                jsx: false
              });
              index -= 1;
            }

            i -= 1;
          }
        }
      } else {
        // root 节点没有 children，则在外面套一层
        replace(t().isJSXElement(node) ? t().jsxFragment(t().jsxOpeningFragment(), t().jsxClosingFragment(), [buildGUmiUIFlag({
          index: 0,
          filename,
          jsx: true
        }), node, buildGUmiUIFlag({
          index: 1,
          filename,
          jsx: true
        })]) : t().callExpression(t().memberExpression(t().identifier('React'), t().identifier('createElement')), [t().memberExpression(t().identifier('React'), t().identifier('Fragment')), t().nullLiteral(), buildGUmiUIFlag({
          index: 0,
          filename,
          jsx: false
        }), node, buildGUmiUIFlag({
          index: 1,
          filename,
          jsx: false
        })]));
      }
    } else {// throw new Error(`Add umi ui flag failed, unsupported node type ${node.type}.`);
    }
  }

  function isInBlackList(node, path) {
    if (t().isJSXElement(node)) {
      const name = node.openingElement.name.name;

      if (path.scope.hasBinding(name)) {
        const p = path.scope.getBinding(name).path;
        const source = p.parentPath.node.source; // 只处理 import 的声明

        if (!t().isImportDeclaration(p.parentPath.node)) return;

        if (source.value === 'react-document-title') {
          return true;
        } // antd 和 @alipay/tech-ui 里除部分用于布局的组件之外，其他组件作为根组件不会插入编辑区


        if ((source.value === 'antd' || source.value === '@alipay/bigfish/antd') && t().isImportSpecifier(p.node) && t().isIdentifier(p.node.imported) && !['Card', 'Grid', 'Layout'].includes(p.node.imported.name)) {
          return true;
        }

        if (source.value === '@alipay/tech-ui' && t().isImportSpecifier(p.node) && t().isIdentifier(p.node.imported) && !['PageContainer'].includes(p.node.imported.name)) {
          return true;
        }
      }
    }
  }

  return {
    visitor: {
      Program: {
        enter(path, state) {
          const filename = state.filename,
                _state$opts = state.opts,
                opts = _state$opts === void 0 ? {} : _state$opts;
          (0, _assert().default)(opts.doTransform, 'opts.doTransform must supplied');

          if (opts.doTransform(filename)) {
            const node = path.node;
            let d = (0, _util.findExportDefaultDeclaration)(node); // Support hoc

            while (t().isCallExpression(d)) {
              // eslint-disable-next-line
              d = d.arguments[0];
            }

            d = (0, _util.getIdentifierDeclaration)(d, path); // Support hoc again

            while (t().isCallExpression(d)) {
              // eslint-disable-next-line
              d = d.arguments[0];
            }

            const ret = (0, _util.getReturnNode)(d, path);

            if (ret) {
              const retNode = ret.node,
                    replace = ret.replace;

              if (retNode && !isInBlackList(retNode, path)) {
                addUmiUIFlag(retNode, {
                  filename: (0, _umiUtils().winPath)(filename),
                  replace
                });
              }
            }
          }
        }

      }
    }
  };
};

exports.default = _default;