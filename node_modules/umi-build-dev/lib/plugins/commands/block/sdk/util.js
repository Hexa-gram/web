"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findExportDefaultDeclaration = findExportDefaultDeclaration;
exports.getIdentifierDeclaration = getIdentifierDeclaration;
exports.isReactCreateElement = isReactCreateElement;
exports.isJSXElement = isJSXElement;
exports.haveChildren = haveChildren;
exports.getReturnNode = getReturnNode;
exports.findIndex = findIndex;
exports.parseContent = parseContent;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function t() {
  const data = _interopRequireWildcard(require("@babel/types"));

  t = function t() {
    return data;
  };

  return data;
}

function parser() {
  const data = _interopRequireWildcard(require("@babel/parser"));

  parser = function parser() {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function findExportDefaultDeclaration(node) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = node.body[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      const n = _step.value;

      if (t().isExportDefaultDeclaration(n)) {
        return n.declaration;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

function getIdentifierDeclaration(node, path) {
  if (t().isIdentifier(node) && path.scope.hasBinding(node.name)) {
    let bindingNode = path.scope.getBinding(node.name).path.node;

    if (t().isVariableDeclarator(bindingNode)) {
      bindingNode = bindingNode.init;
    }

    return bindingNode;
  }

  return node;
}

function isReactCreateElement(node) {
  return t().isCallExpression(node) && t().isMemberExpression(node.callee) && t().isIdentifier(node.callee.object, {
    name: 'React'
  }) && t().isIdentifier(node.callee.property, {
    name: 'createElement'
  });
}

function isJSXElement(node) {
  return t().isJSXElement(node) || t().isJSXFragment(node) || isReactCreateElement(node);
}

function haveChildren(node) {
  if (t().isJSXElement(node) || t().isJSXFragment(node)) {
    return node.children && node.children.length;
  } else {
    return !!node.arguments[2];
  }
}

function getReturnNode(node, path) {
  if (t().isArrowFunctionExpression(node) || t().isFunctionDeclaration(node) || t().isFunctionExpression(node)) {
    return findReturnNode(node, path);
  } else if (t().isClassDeclaration(node) || t().isClassExpression(node)) {
    const renderStatement = findRenderStatement(node.body);

    if (renderStatement) {
      return findReturnNode(renderStatement, path);
    }
  }
}

function findReturnNode(node, path) {
  if (isJSXElement(node.body)) {
    return {
      node: node.body,

      replace(newNode) {
        node.body = newNode;
      }

    };
  }

  if (t().isBlockStatement(node.body)) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = node.body.body[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        const n = _step2.value;

        if (t().isReturnStatement(n)) {
          return {
            node: n.argument,

            replace(newNode) {
              n.argument = newNode;
            }

          };
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  } // if (t.isConditionalExpression(node.body)) {
  //   return getReturnNode({
  //     body: getIdentifierDeclaration(node.body.consequent, path),
  //   }, path);
  // }
  // throw new Error(`Find return statement failed, unsupported node type ${node.body.type}.`);

}

function findRenderStatement(node) {
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = node.body[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      const n = _step3.value;

      if (t().isClassMethod(n) && t().isIdentifier(n.key) && n.key.name === 'render') {
        return n;
      }
    } // throw new Error(`Find render statement failed`);

  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
}

function findIndex(arr, index, fn) {
  if (index === 0) return 0;
  let foundCount = 0;
  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = arr.entries()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      const _step4$value = _slicedToArray(_step4.value, 2),
            i = _step4$value[0],
            item = _step4$value[1];

      if (fn(item)) {
        foundCount += 1;
      }

      if (foundCount === index) {
        return i + 1;
      }
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
        _iterator4.return();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  throw new Error(`Invalid find index params.`);
}

function parseContent(code) {
  return parser().parse(code, {
    sourceType: 'module',
    plugins: ['jsx', 'decorators-legacy', 'typescript', 'classProperties', 'dynamicImport']
  });
}