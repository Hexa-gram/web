"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _fs() {
  const data = require("fs");

  _fs = function _fs() {
    return data;
  };

  return data;
}

var _haveRootBinding = _interopRequireDefault(require("../../../sdk/haveRootBinding"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default({
  success,
  payload,
  api,
  failure
}) {
  const _ref = payload,
        targetPath = _ref.path,
        name = _ref.name; // 找到具体的 js

  const absTargetPath = api.winPath((0, _path().join)(api.paths.absPagesPath, api.winPath(targetPath).replace(api.winPath(api.paths.pagesPath), ''))); // 有些用户路由下载路径是不在的，这里拦住他们

  if (!(0, _fs().existsSync)(absTargetPath)) {
    failure({
      message: ` ${absTargetPath} 目录不存在!`,
      success: false
    });
    return;
  }

  const entryPath = api.findJS(absTargetPath, 'index') || api.findJS(absTargetPath, '');

  if (!entryPath) {
    failure({
      message: `未在 ${absTargetPath} 目录下找到 index.(ts|tsx|js|jsx) !`,
      success: false
    });
    return;
  }

  (0, _haveRootBinding.default)((0, _fs().readFileSync)(entryPath, 'utf-8'), name).then(exists => {
    success({
      exists,
      success: true
    });
  });
}