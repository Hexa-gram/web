"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _UIApiContext = _interopRequireDefault(require("./UIApiContext"));

var _BlocksViewer = _interopRequireDefault(require("./BlocksViewer"));

var _icon = _interopRequireDefault(require("./icon"));

var _zhCN = _interopRequireDefault(require("./locales/zh-CN"));

var _enUS = _interopRequireDefault(require("./locales/en-US"));

var _model = _interopRequireWildcard(require("./model"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function _default(api) {
  (0, _model.initApiToGlobal)(api);
  api.addLocales({
    'zh-CN': _zhCN.default,
    'en-US': _enUS.default
  });
  var ConnectedBlockViewer = api.connect(function (state) {
    return {
      block: state[_model.namespace],
      loading: state.loading.models[_model.namespace]
    };
  })(_BlocksViewer.default);
  api.addPanel({
    title: 'org.umi.ui.blocks.content.title',
    path: '/blocks',
    icon: _react.default.createElement(_icon.default, null),
    actions: [],
    component: function component() {
      return _react.default.createElement(_UIApiContext.default.Provider, {
        value: {
          api: api
        }
      }, _react.default.createElement(ConnectedBlockViewer, null));
    }
  }); // 注册 model

  api.registerModel(_model.default);
};

exports.default = _default;