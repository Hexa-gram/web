"use strict";

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('antd')) : typeof define === 'function' && define.amd ? define(['react', 'antd'], factory) : (global = global || self, global.configuration = factory(global.React, global.antd));
})(void 0, function (React, antd) {
  'use strict';

  var React__default = 'default' in React ? React['default'] : React;

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  var UIContext = React.createContext({});

  function styleInject(css, ref) {
    if (ref === void 0) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') {
      return;
    }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css = ".index-module_normal__3msaf {\n  overflow: hidden;\n}\n.index-module_configuration__3ZvP- #two-column-panel-left {\n  margin-right: 0;\n}\n.index-module_configItem__2PN50 {\n  margin-bottom: 12px;\n}\n.index-module_basicConfig__1kILS .index-module_group__1tnVg {\n  margin-bottom: 30px;\n}\n.index-module_basicConfig__1kILS h2 {\n  font-size: 24px;\n}\n";
  var styles = {
    "normal": "index-module_normal__3msaf",
    "configuration": "index-module_configuration__3ZvP-",
    "configItem": "index-module_configItem__2PN50",
    "basicConfig": "index-module_basicConfig__1kILS",
    "group": "index-module_group__1tnVg"
  };
  styleInject(css);

  function getSections(api) {
    var ConfigForm = api.ConfigForm,
        getBasicUI = api.getBasicUI;
    var basicUI = getBasicUI();
    var sections = [{
      key: 'project',
      title: 'org.umi.ui.configuration.project.config.title',
      icon: React__default.createElement("img", {
        src: "https://img.alicdn.com/tfs/TB1aqdSeEY1gK0jSZFMXXaWcVXa-64-64.png",
        width: api.mini ? 24 : 32,
        height: api.mini ? 24 : 32
      }),
      description: function description() {
        return api.intl({
          id: 'org.umi.ui.configuration.project.config.desc'
        }, {
          library: basicUI.name || 'Umi'
        });
      },
      component: function component() {
        return React__default.createElement(ConfigForm, {
          title: "org.umi.ui.configuration.project.config.title",
          list: "org.umi.config.list",
          edit: "org.umi.config.edit"
        });
      }
    }].concat(_toConsumableArray(api.service.configSections));
    return sections;
  }

  var ConfigManager = function ConfigManager(_ref) {
    var api = _ref.api;
    var TwoColumnPanel = api.TwoColumnPanel,
        getContext = api.getContext,
        debug = api.debug,
        intl = api.intl;

    var _useContext = React.useContext(getContext()),
        theme = _useContext.theme;

    return React__default.createElement(UIContext.Provider, {
      value: {
        api: api,
        debug: debug.extend('configuration'),
        theme: theme
      }
    }, React__default.createElement(TwoColumnPanel, {
      disableRightOverflow: true,
      className: styles.configuration,
      sections: getSections(api)
    }));
  };

  var zhCN = {
    'org.umi.ui.configuration.panel': '配置',
    'org.umi.ui.configuration.actions.open.config': '打开配置文件',
    'org.umi.ui.configuration.project.config.title': '项目配置',
    'org.umi.ui.configuration.project.config.desc': '配置 {library} 项目',
    'org.umi.ui.configuration.project.config.react.title': 'umi-plugin-react'
  };
  var enUS = {
    'org.umi.ui.configuration.panel': 'Configuration',
    'org.umi.ui.configuration.actions.open.config': 'Open Config File',
    'org.umi.ui.configuration.project.config.title': 'Project Configuration',
    'org.umi.ui.configuration.project.config.desc': 'Configuration {library} Project',
    'org.umi.ui.configuration.project.config.react.title': 'umi-plugin-react'
  };

  var ConfigAction = function ConfigAction(_ref) {
    var api = _ref.api;
    var intl = api.intl;
    var FormattedMessage = intl.FormattedMessage;
    return React__default.createElement(antd.Button, {
      onClick: function onClick() {
        api.launchEditor({
          type: 'config'
        });
      },
      size: api.mini ? 'small' : 'default',
      type: "default"
    }, React__default.createElement(FormattedMessage, {
      id: "org.umi.ui.configuration.actions.open.config"
    }));
  };

  var ui = function ui(api) {
    api.addLocales({
      'zh-CN': zhCN,
      'en-US': enUS
    });
    api.addPanel({
      title: 'org.umi.ui.configuration.panel',
      actions: [React__default.createElement(ConfigAction, {
        api: api
      })],
      path: '/configuration',
      icon: {
        type: 'control',
        theme: 'filled'
      },
      component: function component() {
        return React__default.createElement(ConfigManager, {
          api: api
        });
      }
    });
  };

  return ui;
});